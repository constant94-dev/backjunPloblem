# 빙고 - 백준 2578번

# 빙고가 되는 위치 값
# 행 고정 열 변화
# (0,0), (0,1), (0,2), (0,3) (0,4)
# (1,0), (1,1), (1,2), (1,3) (1,4)
# (2,0), (2,1), (2,2), (2,3) (2,4)
# (3,0), (3,1), (3,2), (3,3) (3,4)
# (4,0), (4,1), (4,2), (4,3) (4,4)

# 열 고정 행 변화
# (0,0), (1,0), (2,0), (3,0), (4,0)
# (0,1), (1,1), (2,1), (3,1), (4,1)
# (0,2), (1,2), (2,2), (3,2), (4,2)
# (0,3), (1,3), (2,3), (3,3), (4,3)
# (0,4), (1,4), (2,4), (3,4), (4,4)

# 대각선
# (0,0), (1,1), (2,2), (3,3), (4,4)
# (0,4), (1,3), (2,2), (3,1), (4,0)

# 의사코드
# for 0~5까지, 한 줄에 다섯 개씩 빈 칸을 사이에 두고 주어진다.
# for 0~5까지, 한 줄에 다섯 개씩 빈 칸을 사이에 두고 주어진다.

# 각 행렬의 True, False 값으로 방문 상태 체크
# True 면 방문, False 면 방문 안함
# 하나의 빙고는 최소 5개의 수가 불러져야 가능하다.
# 5개의 수가 불러지고 난 후 전체 행렬을 반복하면서 빙고 조건이 완성되었는지 확인한다.

# 빙고 조건이 되는 순간 빙고 카운팅 bingo += 1

# 사회자가 몇 번째 수를 부른 후 철수가 빙고를 외친다.

# 구현
import sys
input = sys.stdin.readline
# 1. 입력을 받아 철수의 빙고판을 만든다.

# 2. 입력을 받아 사회자가 호명한 번호를 True 로 바꾼다.

# 3. 12개의 수가 불려지고 난 후에는 전체 행렬을 반복하면서 빙고 조건이 완성되었는지 확인한다.

# 4. 빙고 조건이 된다면 카운팅을 하나 올린다.

# 5. 빙고 카운팅이 3개가 되었을 때 사회자가 부른 몇 번째 수를 출력한다.

c = [list(map(int, input().split())) for _ in range(5)] # 입력을 받아 철수의 빙고판을 만든다.
mc = [] # 사회자가 부른 수를 입력받는다.
for _ in range(5):
    mc += list(map(int, input().split()))

# 빙고를 확인하는 함수
def check():
    bingo = 0

    # 가로 확인
    for x in c: # c[0] 번부터 하나씩 꺼내는 반복
        if x.count(0) == 5: # c[n] 인덱스의 0 의 개수가 5개면 빙고!
            bingo += 1

    # 세로 확인
    for i in range(5): 
        y = 0
        for j in range(5): # 리스트는 가로로 쭈욱 나열되어 있어 [][] 리스트 인덱스를 하나하나 뽑아서 확인할 필요가 없지만,
            # 세로는 인덱스를 [][] 리스트를 하나하나 늘려가며 확인해주어야 한다.
            if c[j][i] == 0: # 해당 인덱스의 값이 0일 때는 사회자가 불렀던 수라는 것!
                y += 1
        
        if y == 5: # 세로 줄에 0의 개수가 5개면 빙고!
            bingo += 1

    # 왼쪽위부터 시작하는 대각선 확인 (주 대각선)
    d1 = 0
    for i in range(5):
        if c[i][i] == 0: # 주 대각선의 [][] 리스트 인덱스를 하나씩 확인한다.
            # 주 대각선은 행과열이 함께 1씩 증가한다.
            d1 += 1
    
    if d1 == 5: # 주 대각선에 0의 개수가 5개면 빙고!
        bingo += 1

    # 오른쪽위부터 시작하는 대각선 확인 (부 대각선)
    d2 = 0
    for i in range(5):
        if c[i][4-i] == 0: # 부 대각선의 [][] 리스트 인덱스를 하나씩 확인한다.
            # 부 대각선은 주 대각선과 다르게 행은 1씩 증가, 열은 1씩 감소한다.
            d2 += 1
    
    if d2 == 5: # 부 대각선에 0의 개수가 5개면 빙고!
        bingo += 1

    return bingo # 현재까지 완성된 빙고 수를 반환한다.

cnt = 0 # 사회자가 부른 수의 개수
for i in range(25): # 사회자가 부른 숫자를 하나씩 가져와 비교해 보기 위한 반복문
    for x in range(5): # 행 증가
        for y in range(5): # 열 증가
            if mc[i] == c[x][y]: # 사회자가 부른 첫 번째 수부터 철수의 빙고판을 전부 확인한후 사회자가 부른 두번째 수로 넘어간다.
                c[x][y] = 0 # 사회자가 부른 수와 철수의 빙고판 수가 같다면 해당된 철수의 빙고판을 0 으로 변경한다.
                cnt += 1 # 사회자가 부른 수와 철수의 빙고판 수가 같을 때마다 1 증가한다.

    if cnt >= 12: # 사회자가 가장 적게 부른 수의 개수가 3개의 빙고가 되려면 12개만 불러도된다.        
        result = check() # 사회자가 12개를 부른 순간부터 빙고의 수를 확인하는 함수 실행
        # 함수의 결과 값인 빙고의 수가 3개가 아니면 사회자가 부른 13번째 수를 처리하고 다시 실행

        if result >= 3: # 완성된 빙고 수가 3개 이상일 때
            print(i+1) # 0번 인덱스부터 시작했기 때문에 +1을 해준다.
            break # 사회자가 부른 뒤에 수들을 확인하지 않고 반복문을 종료한다.
